type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CallOFTReceivedSuccess @entity(immutable: true) {
  id: Bytes!
  _srcChainId: Int! # uint16
  _srcAddress: Bytes! # bytes
  _nonce: BigInt! # uint64
  _hash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MessageFailed @entity(immutable: true) {
  id: Bytes!
  _srcChainId: Int! # uint16
  _srcAddress: Bytes! # bytes
  _nonce: BigInt! # uint64
  _payload: Bytes! # bytes
  _reason: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NonContractAddress @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReceiveFromChain @entity(immutable: true) {
  id: Bytes!
  _srcChainId: Int! # uint16
  _to: Bytes! # address
  _amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RetryMessageSuccess @entity(immutable: true) {
  id: Bytes!
  _srcChainId: Int! # uint16
  _srcAddress: Bytes! # bytes
  _nonce: BigInt! # uint64
  _payloadHash: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SendToChain @entity(immutable: true) {
  id: Bytes!
  _dstChainId: Int! # uint16
  _from: Bytes! # address
  _toAddress: Bytes! # bytes32
  _amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetDefaultFeeBp @entity(immutable: true) {
  id: Bytes!
  feeBp: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetFeeBp @entity(immutable: true) {
  id: Bytes!
  dstchainId: Int! # uint16
  enabled: Boolean! # bool
  feeBp: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetFeeOwner @entity(immutable: true) {
  id: Bytes!
  feeOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetMinDstGas @entity(immutable: true) {
  id: Bytes!
  _dstChainId: Int! # uint16
  _type: Int! # uint16
  _minDstGas: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetPrecrime @entity(immutable: true) {
  id: Bytes!
  precrime: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetTrustedRemote @entity(immutable: true) {
  id: Bytes!
  _remoteChainId: Int! # uint16
  _path: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetTrustedRemoteAddress @entity(immutable: true) {
  id: Bytes!
  _remoteChainId: Int! # uint16
  _remoteAddress: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetUseCustomAdapterParams @entity(immutable: true) {
  id: Bytes!
  _useCustomAdapterParams: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
